{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"deque","date":"2022-04-15T03:57:07.603Z","updated":"2022-04-15T04:50:13.024Z","comments":true,"path":"api/articles/deque.json","keywords":null,"cover":null,"content":"<h1 id=\"C-deque解析\"><a href=\"#C-deque解析\" class=\"headerlink\" title=\"C++ deque解析\"></a>C++ deque解析</h1><p>双端队列deque(double-ended queue)，容量可动态变化，两段可插入删除，是顺序容器。deque实际分配内存比当前容纳元素内存要多，空闲空间在增加元素时使用。</p>\n<p>与vector不同，deque的底层存储空间并不是连续的。离散的存储空间给数据操作例如增添和删除提供了遍历，因为不需要进行“移动，配置，释放”等一系列操作，但这样的代价就是deque拥有复杂的数据结构。</p>\n<p>deque使用map（并非STL库里的map）这种结构作为主控，每个map实际上是一个指向另一块被称为缓冲区的连续内存的指针，而这些缓冲区才是deque的实际存储结构，如果初始化时没有指定缓冲区大小则默认为512bytes。deque利用map串联起来的关系网形成对用户透明的连续存储空间，串联任务由迭代器完成。</p>\n<p>deque迭代器结构设计：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">&#x2F;&#x2F; 迭代器所含成员数据\n  value_pointer cur;    &#x2F;&#x2F; 指向所在缓冲区的当前元素\n  value_pointer first;  &#x2F;&#x2F; 指向所在缓冲区的头部\n  value_pointer last;   &#x2F;&#x2F; 指向所在缓冲区的尾部\n  map_pointer   node;   &#x2F;&#x2F; 缓冲区所在节点</code></pre>\n\n<p>deque和list可以作为底层容器实现stack和queue。</p>\n","text":"C++ deque解析双端队列deque(double-ended queue)，容量可动态变化，两段可插入删除，是顺序容器。deque实际分配内存比当前容纳元素内存要多，空闲空间在增加元素时使用。 与vector不同，deque的底层存储空间并不是连续的。离散的存储空间给数据操...","link":"","photos":[],"count_time":{"symbolsCount":621,"symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C-deque%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">C++ deque解析</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"KMP","date":"2022-04-15T16:37:36.087Z","updated":"2022-04-16T08:00:49.472Z","comments":true,"path":"api/articles/KMP.json","keywords":null,"cover":null,"text":"KMP算法详解如果要两个字符串相互匹配，以判断其中一个是否是另一个的子串，并且返回匹配下标，怎么办？ 那么第一时间想出来的办法肯定是遍历字符串。我们称需要匹配的为s1，被匹配的是s2（也就是说判断s1是否是s2的子串）。然后找到匹配的第一个下标，再从这个下标出开始继续匹配，成功则...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}